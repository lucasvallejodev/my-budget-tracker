// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String      @id @default(uuid())
  userId        String
  name          String
  type          AccountType
  balance       Float       @default(0)

  institution   String?     // Bank name
  accountNumber String?     // Last 4 digits
  color         String?     // For UI customization
  icon          String?
  notes         String?
  
  isDeleted     Boolean     @default(false)
  deletedAt     DateTime?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  transactions        Transaction[]
  linkedTransactions  Transaction[] @relation("TransferLinkedAccount")
  
  @@index([userId])
  @@index([userId, isDeleted])
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  CASH
  INVESTMENT
  OTHER
}

model Payee {
  id        String   @id @default(uuid())
  userId    String
  name      String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId  String?

  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  transactions Transaction[]
  
  @@unique([userId, name])
  @@index([userId])
}

enum TransactionType {
  EXPENSE
  INCOME
}

model Transaction {
  id          String    @id @default(uuid())
  userId      String
  
  accountId   String
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Restrict)
  
  categoryId  String?

  payeeId  String?
  payee    Payee? @relation(fields: [payeeId], references: [id], onDelete: Restrict)

  amount      Float
  description String
  date        DateTime
  type        TransactionType
  
  isTransfer       Boolean      @default(false)
  transferId       String?      @unique
  linkedAccountId  String?
  linkedAccount    Account?     @relation("TransferLinkedAccount", fields: [linkedAccountId], references: [id], onDelete: SetNull)
  transferPair     Transaction? @relation("TransferPair", fields: [transferId], references: [id])
  transferLinked   Transaction? @relation("TransferPair")
  
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
  @@index([userId, date])
  @@index([date])
  @@index([userId, isDeleted])
  @@index([transferId])
}

model MonthlyHistory {
  id       String @id @default(uuid())
  userId   String
  day      Int
  month    Int
  year     Int
  
  income   Float  @default(0)
  expense  Float  @default(0)
  
  @@unique([userId, day, month, year])
  @@index([userId, year, month])
}

model MonthlyCategoryGroupHistory {
  id              String @id @default(uuid())
  userId          String
  categoryGroupId String
  
  month           Int
  year            Int
  
  income          Float  @default(0)
  expense         Float  @default(0)
  
  @@unique([userId, categoryGroupId, month, year])
  @@index([userId, year, month])
  @@index([categoryGroupId])
}

model YearlyHistory {
  id       String @id @default(uuid())
  userId   String
  month    Int
  year     Int
  
  income   Float  @default(0)
  expense  Float  @default(0)
  
  @@unique([userId, month, year])
  @@index([userId, year])
}

model NetWorthSnapshot {
  id        String   @id @default(uuid())
  userId    String
  
  date      DateTime
  netWorth  Float
  
  breakdown Json?    // { "checking": 5000, "savings": 10000, "creditCard": -2000 }
  
  createdAt DateTime @default(now())
  
  @@index([userId, date])
}